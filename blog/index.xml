<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on Saurav Maheshkar</title><link>https://sauravmaheshkar.github.io/blog/</link><description>Recent content in Blog on Saurav Maheshkar</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 31 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://sauravmaheshkar.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Every Model is a Kernel Machine</title><link>https://sauravmaheshkar.github.io/blog/kernel-machine/</link><pubDate>Fri, 19 Feb 2021 00:00:00 +0000</pubDate><guid>https://sauravmaheshkar.github.io/blog/kernel-machine/</guid><description>Introduction We all know how poorly understood deep learning is, in recent times fields such as Explainability and Interpretability have emerged highlighting the black box that are deep nets. In contrast, kernel machines are based on a well-developed mathematical theory but their performance lacks behind that of deep networks. The most used algorithm for training deep networks is undoubtedly Gradient Descent. In this paper the author shows that every model learnt using this method, regardless of its architecture, is approximately equivalent tp a kernel machine ðŸ¤”.</description></item><item><title>Introduction to Duck Typing and EAFP</title><link>https://sauravmaheshkar.github.io/blog/duck-typing-eafp/</link><pubDate>Sat, 12 Dec 2020 00:00:00 +0000</pubDate><guid>https://sauravmaheshkar.github.io/blog/duck-typing-eafp/</guid><description>Duck-Typing is a extremely useful programming style, which truly makes python awesome. It enables us to &amp;ldquo;ignore&amp;rdquo; the object type and rather just check if the object contains the function or not.
Famously referred in the python documentation as:
&amp;ldquo;If it looks like a duck and quacks like a duck, it must be a duck&amp;rdquo;
If the codebase is well defined, this allows for flexibility by allowing polymorphic substitution.</description></item><item><title>Named Entity Recognition using Reformer</title><link>https://sauravmaheshkar.github.io/blog/ner-reformer/</link><pubDate>Thu, 19 Nov 2020 00:00:00 +0000</pubDate><guid>https://sauravmaheshkar.github.io/blog/ner-reformer/</guid><description>Link to the Kaggle Kernel which is referenced in this post
Introduction Named entity recognition(NER) is the task to identify mentions of rigid designators from text belonging to predefined semantic types such as person, location, organization etc. NER always servers as the foundation of many natural language applications such as question answering, text summarization, and machine translation.
Despite the various definitions of NE(Named Entity), researchers have reached common consensus on the types of NEs to recognize.</description></item><item><title>Regularized Greedy Forest</title><link>https://sauravmaheshkar.github.io/blog/regularized-greedy-forest/</link><pubDate>Sun, 27 Sep 2020 00:00:00 +0000</pubDate><guid>https://sauravmaheshkar.github.io/blog/regularized-greedy-forest/</guid><description>Check out the Paper
Key Takeaway: A new proposed method which learns decision forests via fully-corrective regularized greedy search using the underlying forest structure by defining regularizers that explicitly take advantage of individual tree structures.
Introduction A popular method to solve the problem of learning non-linear functions from data is through decision tree learning , which has an important advantage for handling heterogeneous data with ease when different features come from different sources.</description></item></channel></rss>