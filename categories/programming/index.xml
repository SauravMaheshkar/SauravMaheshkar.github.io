<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on Saurav Maheshkar</title><link>https://sauravmaheshkar.github.io/categories/programming/</link><description>Recent content in Programming on Saurav Maheshkar</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 12 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://sauravmaheshkar.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction to Duck Typing and EAFP</title><link>https://sauravmaheshkar.github.io/blog/duck-typing-eafp/</link><pubDate>Sat, 12 Dec 2020 00:00:00 +0000</pubDate><guid>https://sauravmaheshkar.github.io/blog/duck-typing-eafp/</guid><description>Duck-Typing is a extremely useful programming style, which truly makes python awesome. It enables us to &amp;ldquo;ignore&amp;rdquo; the object type and rather just check if the object contains the function or not.
Famously referred in the python documentation as:
&amp;ldquo;If it looks like a duck and quacks like a duck, it must be a duck&amp;rdquo;
If the codebase is well defined, this allows for flexibility by allowing polymorphic substitution.</description></item></channel></rss>